// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // regular ALU
     ALU(x=x, y=y, 
         zx=instruction[5], nx=instruction[4], 
         zy=instruction[3], ny=instruction[2], 
         f=instruction[1], no=instruction[0], 
         out=outALU0, 
         zr=zrALU0, ng=ngALU0);

     // If instruction[4] == 0, the input "y" will be shifted, else "x".
     Mux16(a=y, b=x, sel=instruction[4], out=xOrY);
     ShiftLeft(in=xOrY, out=left);
     ShiftRight(in=xOrY, out=right);
     // If instruction[5] == 0, the shift will be a right-shift, else left.
     Mux16(a=right, b=left, sel=instruction[5], out=shifted);
     // shift ALU
     ALU(x=shifted, y=false,
         zx=false, nx=false,
         zy=false, ny=false,
         f=true, no=false,
         out=outALU1,
         zr=zrALU1, ng=ngALU1);

     Mux4Way16(a=false, b=outALU1, c=false, d=outALU0,
               sel=instruction[7..8], out=out);
     Mux4Way16(a=false, b[0]=zrALU1, b[1..15]=false, c=false,
               d[0]=zrALU0, d[1..15]=false,
               sel=instruction[7..8], out[0]=zr);
     Mux4Way16(a=false, b[0]=ngALU1, b[1..15]=false, c=false,
               d[0]=ngALU0, d[1..15]=false,
               sel=instruction[7..8], out[0]=ng);
}
