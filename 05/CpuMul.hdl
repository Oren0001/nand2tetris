// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    Not(in=instruction[15], out=notOP);
	Mux16(a=outALU, b=instruction, sel=notOP, out=inputA);

	Or(a=notOP, b=instruction[5], out=loadA);
	ARegister(in=inputA, load=loadA, out=outA, out[0..14]=addressM);

	And(a=instruction[15], b=instruction[12], out=aXorM);
	Mux16(a=outA, b=inM, sel=aXorM, out=input1ALU);

    // changes for CpuMul
    // choose regular ALU or extended ALU
    Mux16(a[0..12]=instruction[0..12], a[13..14]=true, a[15]=false,
          b=instruction, sel=instruction[15], 
          out[6..14]=instALU);

    ExtendAlu(x=input0ALU, y=input1ALU, instruction=instALU,
              out=outALU, out=outM, zr=zr, ng=ng);

    // end of changes


	And(a=instruction[15], b=instruction[4], out=loadD);
	DRegister(in=outALU, load=loadD, out=input0ALU);

	And(a=instruction[15], b=instruction[3], out=writeM);

    Or(a=ng, b=zr, out=ngOrzr);
    Not(in=ngOrzr, out=positive);
	And(a=instruction[15], b=instruction[0], out=JGT);
	And(a=JGT, b=positive, out=load0);

	And(a=instruction[15], b=instruction[1], out=JEQ);
	And(a=JEQ, b=zr, out=load1);

	And(a=instruction[15], b=instruction[2], out=JLT);
	And(a=JLT, b=ng, out=load2);

	Or(a=load0,b=load1,out=load0OrLoad1);
	Or(a=load2,b=load0OrLoad1,out=loadPC);

	PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}
