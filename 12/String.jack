// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, _maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let _maxLength = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int i;
        var String newStr;
        if (length < _maxLength) {
            let str[length] = c;
            let length = length + 1;
            return this;
        }
        else {
            let newStr = String.new(_maxLength * 2);
            let i = 0;
            // copy str to new str
            while (i < length) {
                do newStr.appendChar(str[i]);
                let i = i + 1;
            }
            do newStr.appendChar(c);
            return newStr;
        }
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(length = 0)) {
            let length = length - 1;
        }
        return;
    }

    function int convertCharToInt(char c) {
        if ((c > 47) & (c < 58)) {
            return c - 48;
        }
        else {
            return -1;
        }
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, d, val;
        var boolean isNeg;
        let val = 0;
        let d = -1;
        let i = 0;
        if ((length > 0) & (str[0] = 45)) {
            let isNeg = true;
            let i = i + 1;
        }
        if (length > i) {
            let d = String.convertCharToInt(str[i]);
            if (~(d = -1)) {
                let val = d;
            }
            let i = i + 1;
        }
        while ((i < length) & ~(d = -1)) {
            let d = String.convertCharToInt(str[i]);
            if (~(d = -1)) {
                let val = (val * 10) + d;
            }
            let i = i + 1;
        }
        if (isNeg) {
            let val = -val;
        }
        return val;
    }

    function char convertDigitToChar(int digit) {
        return digit + 48;
    }

    method void setIntHelper(int val) {
        var int lastDigit, q;
        var char c;
        let q = val / 10;
        let lastDigit = val - (q * 10);
        let c = String.convertDigitToChar(lastDigit);
        if (val < 10) {
            do appendChar(c);
        }
        else {
            do setIntHelper(q);
            do appendChar(c);
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0) {
            do appendChar(45);
            do setIntHelper(-val);
        }
        else {
            do setIntHelper(val);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
